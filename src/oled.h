
#include <Arduino.h>
#include <U8g2lib.h>

U8G2_SSD1306_128X64_NONAME_F_HW_I2C u8g2(U8G2_R0);
void displayWiFiInfo(IPAddress ip, const char *wsStatus);
void displayWiFiError();

const unsigned char epd_bitmap_park [] PROGMEM = {
	0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x03, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xc0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x07, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x60, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xfe, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x1c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x3b, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xfe, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xfe, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0xc0, 0x1b, 0xf8, 0x03, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x80, 0x0f, 0x00, 0x00, 
	0x00, 0x00, 0x7c, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x38, 0x00, 0x00, 
	0x00, 0x00, 0x38, 0x08, 0x10, 0x1c, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x1f, 0xf8, 0x0f, 0x00, 0x00, 
	0x00, 0x00, 0xe0, 0x1f, 0xf8, 0x07, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x39, 0x9c, 0x03, 0x00, 0x00, 
	0x00, 0x00, 0xe0, 0xf0, 0x0f, 0x07, 0x00, 0x00, 0x00, 0x00, 0x70, 0xe0, 0x07, 0x0e, 0x00, 0x00, 
	0x00, 0x00, 0x38, 0x60, 0x06, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x63, 0xc6, 0x78, 0x00, 0x00, 
	0x00, 0x80, 0x07, 0xe1, 0x87, 0xe0, 0x01, 0x00, 0x00, 0xc0, 0x03, 0x80, 0x01, 0xc0, 0x03, 0x00, 
	0x00, 0xc0, 0x01, 0x0e, 0x70, 0x80, 0x03, 0x00, 0x00, 0x80, 0x83, 0x0f, 0xf0, 0xc1, 0x01, 0x00, 
	0x00, 0x00, 0xff, 0x0f, 0xf0, 0xff, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x1c, 0x38, 0x7f, 0x00, 0x00, 
	0x00, 0x00, 0x0e, 0x18, 0x18, 0x70, 0x00, 0x00, 0x00, 0x00, 0x07, 0x38, 0x1c, 0xe0, 0x00, 0x00, 
	0x00, 0x80, 0x03, 0x70, 0x0e, 0xc0, 0x01, 0x00, 0x00, 0xe0, 0x01, 0xe0, 0x07, 0x80, 0x07, 0x00, 
	0x00, 0xf8, 0x80, 0xc0, 0x03, 0x01, 0x1f, 0x00, 0x00, 0x38, 0xe0, 0x03, 0xc0, 0x07, 0x1c, 0x00, 
	0x00, 0x18, 0xf0, 0x03, 0xc0, 0x07, 0x18, 0x00, 0x00, 0x38, 0x30, 0x07, 0xe0, 0x0c, 0x1c, 0x00, 
	0x00, 0xf0, 0x78, 0x07, 0xc0, 0x1e, 0x0f, 0x00, 0x00, 0xe0, 0xff, 0x83, 0xc1, 0xff, 0x07, 0x00, 
	0x00, 0xe0, 0xcf, 0xc1, 0x83, 0xf3, 0x07, 0x00, 0x00, 0x70, 0x80, 0xe3, 0xc7, 0x01, 0x0e, 0x00, 
	0x00, 0x38, 0x03, 0x73, 0xce, 0xc0, 0x1c, 0x00, 0x00, 0x1c, 0x03, 0x3f, 0xfc, 0xc0, 0x38, 0x00, 
	0x00, 0x0e, 0x00, 0x1e, 0x78, 0x00, 0x70, 0x00, 0x00, 0x07, 0x00, 0xcc, 0x33, 0x00, 0xe0, 0x00, 
	0xc0, 0x03, 0x03, 0xe0, 0x07, 0xc0, 0xc0, 0x03, 0xe0, 0xc1, 0x8f, 0x60, 0x06, 0xf1, 0x83, 0x07, 
	0x70, 0xc0, 0xcd, 0x60, 0x06, 0xb3, 0x03, 0x0e, 0x60, 0xc0, 0x0c, 0xe0, 0x07, 0x30, 0x03, 0x06, 
	0xe0, 0xc0, 0x0f, 0xc0, 0x03, 0xf0, 0x03, 0x07, 0xc0, 0xff, 0x07, 0x00, 0x00, 0xe0, 0xff, 0x03, 
	0x80, 0x7f, 0x07, 0x0e, 0x70, 0xe0, 0xfe, 0x01, 0x00, 0x0c, 0x06, 0x0f, 0xf0, 0x60, 0x30, 0x00, 
	0x00, 0x00, 0x86, 0x1f, 0xf8, 0x61, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x19, 0x98, 0x7f, 0x00, 0x00, 
	0x00, 0x00, 0xfc, 0x38, 0x1c, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x18, 0xf0, 0x0f, 0x18, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xe0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00
};



void initOLED() {    
    u8g2.begin();
    u8g2.clearBuffer();
    u8g2.drawXBM( 25, 0, 64, 64, epd_bitmap_park);
    u8g2.sendBuffer();
    delay(2000);
    u8g2.clearBuffer();
    u8g2.setFont(u8g2_font_profont17_mr);
    u8g2.drawStr(0, 10, "Starting...");
    u8g2.sendBuffer();
}

void displayWifiAndReconnect(bool isWiFiConnected, IPAddress ip, const char *wsStatus) {
  if (isWiFiConnected) {
	displayWiFiInfo(ip, wsStatus);
  } else {
		displayWiFiError();
   // initWIFI(); // This is not needed, the checkWiFiConnection() function will take care of it
  }
}

void displayWiFiInfo(IPAddress ip, const char *wsStatus ) {
	u8g2.clearBuffer();
	u8g2.drawStr(0, 10, "WiFi OK!");
	u8g2.drawStr(0, 30, ip.toString().c_str());
	u8g2.drawStr(0, 50, wsStatus);
	u8g2.sendBuffer();
}
void displayWiFiError() {
	u8g2.clearBuffer();
	u8g2.drawStr(0, 30, "No WiFi...");
	u8g2.sendBuffer();
}

void displayMessage(const char *msg) {
	u8g2.clearBuffer();
	Serial.println(msg);
	u8g2.drawStr(0, 10, msg);
	u8g2.sendBuffer();
	delay(2000);
}